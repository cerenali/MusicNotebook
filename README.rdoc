== README
Link to Heroku here[https://evening-fjord-8412.herokuapp.com/].

=== Tagging and Search
Instead of writing a tag system from scratch, I decided to make use of the 
acts_as_taggable_on[https://github.com/mbleigh/acts-as-taggable-on] gem to 
implement tagging for songs. This was easier said than done, however, as I'd
already begun to implement my own tagging system with a Tag model. A first
attempt at using the acts_as_taggable_on gem resulted in conflicts with
the existing Tag and Tagging models, so I removed the existing models, 
controllers, and views. (This was a tricky but valuable exercise in learning 
about migrations, too.) 

After this, I found I was able to add tags to songs in the Rails console, but 
they did not save properly; once the form for a new song was submitted, the 
entered tags did not show up on the song page, and indeed did not seem to have 
been saved into the database at all. I spent a long time consulting tutorials 
and documentation for the gem, and eventually found that the problem originated 
from the following line in the <tt>song_params</tt> method in the Song 
controller: <tt>params.require(:song).permit(:title, :artist, :tag_list => [])</tt>.
Although this line was present in every tutorial I read, I suspect something 
had changed since the tutorials were published so that the tag_list was 
actually always being reset to an empty array upon song creation. Removing  
<tt>=> []</tt> from the <tt>song_params</tt> method fixed the problem, and tags 
are now properly attached to songs. I also added a new Tag controller and view in order to display all of the songs associated with a particular tag, and made 
some superficial changes to the appearance of a few pages.

Also, as part of class (3/31/15?), I added a search functionality for users, 
which can be seen in the navigation bar.

=== Queries
The first query I added was to the Users Controller, in order to create a 
"suggested friends" feature. In a method called "suggested_friends", I created
a variable @other_users and populated it using the query
<tt>User.where.not(id: @user.id)</tt>. This will return all of the users who
are not the current user, and display them as suggested friends for the current
user.

The second query I added was to the Songs Controller so that the songs could be
displayed in alphabetical order by artist. This was accomplished by changing
one line in the index method: <tt>@songs = Song.order(:artist)</tt>.

The third and fourth queries I added were both to the Tag Controller, in order
to retrieve the five most recently added tags. In the index method of the tag
controller, I added a @recent_tags variable and used two queries on it: one to
sort the tags in order of descending date of creation, and another to limit the
results to the first 5: <tt>Tag.order(created_at: :desc).limit(5)</tt>. This
successfully fetches the last 5 tags that were added.

=== Heroku Add-Ons
I added the SendGrid add-on to my Heroku app in order to send password reset 
emails through Devise. I'm planning to expand this to send all sorts of 
notification emails for important events, and would ideally also have a 
welcome email for new users once the full functionality of the app is complete.

At first, I had problems with the SendGrid environmental variables, as some of 
them were not set in Heroku. This was resolved by setting the missing 
environment variable in Heroku:
<tt>heroku config:add SENDGRID_DOMAIN=[link to my app]</tt>.

=== Gems and Validations
I added two gems: Devise for user authentication, and Rails_Layout to generate
nice default Bootstrap 3 views. Additionally, I added two validations to the User model: one
to ensure that a username is present and one to ensure an email is present and
correctly formatted. I also added two presence validations to the Song and Tag models for their respective fields
(title/artist and title, respectively).

I had trouble with the "Edit User" functionality at first, as
the original setup was allowing any user who signed in to edit any other user, but I fixed it by
placing a condition around the "Edit User" link (<tt><% if current_user == @user %></tt>).
I also restricted users' ability to delete users to only their own accounts.

Another issue I had was that the "Edit User" page was requiring both a current password
and a new password. This turned out to be because I had included a validation for the
"password" field in the User model; removing this validation took care of the problem.
(It turns out Devise automatically validates the password on its own, so I didn't
even need to have a validation for it.)

=== Show/Edit/Destroy
I created show, edit, and destroy controllers for each of my models (Users,
Songs, and Tags), and edited the html.erb files to provide access to these
functionalities. I also installed a missing gem (rails_12factor) to get the 
CSS to show on the Heroku app, and prettied it up a bit with Bootstrap. This
was all relatively straightforward, and I haven't run into any insurmountable
challenges yet.

=== Schema
I had issues getting the Heroku app to run, but I fixed them by running "heroku run rake db:migrate" after pushing
to Heroku. Also, I intend to have many-to-many relationships between Users and Songs, Users and Tags, and Songs and
Tags, so the tables will eventually be related to each other.

==== Users
* id:integer
* username:string
* password:string

==== Songs
* id:integer
* title:string
* artist:string

==== Tags
* id:integer
* title:string
* count:integer
